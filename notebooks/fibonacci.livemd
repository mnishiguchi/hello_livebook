<!-- livebook:{"persist_outputs":true} -->

# Fibonacci sequence

```elixir
Mix.install([
  {:benchee, "~> 1.3.0"}
])
```

## Introduction

* https://ja.wikipedia.org/wiki/フィボナッチ数
* https://en.wikipedia.org/wiki/Fibonacci_sequence

## シンプルな再帰的処理

* n が与えられてから F(n) が求まるまでに指数時間の計算が必要となるため、実用的ではない

```elixir
mod = MnishiguchiFib.SimpleRecursion

defmodule mod do
  def calc(0), do: 0
  def calc(1), do: 1
  def calc(n), do: calc(n - 2) + calc(n - 1)
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 指数関数的なコールを必要としない再帰的処理

```elixir
mod = MnishiguchiFib.NonexponentialRecursion

defmodule mod do
  def calc(n, a \\ 0, b \\ 1)
  def calc(n, _, _) when n < 0, do: :error
  def calc(n, a, b) when n > 1, do: calc(n - 1, b, a + b)
  def calc(0, _, _), do: 0
  def calc(_, _, b), do: b
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 一般項の公式

```elixir
mod = MnishiguchiFib.Formula

defmodule mod do
  def calc(n) do
    round((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5)
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Map でメモ化

```elixir
mod = MnishiguchiFib.MemoWithMap

defmodule mod do
  def calc(number) do
    {value, _} = calc(number, %{0 => 0, 1 => 1})
    value
  end

  def calc(number, lookup) when number in 0..1, do: {number, lookup}

  def calc(number, lookup) when is_map_key(lookup, number), do: {lookup[number], lookup}

  def calc(number, lookup) do
    {value1, lookup} = calc(number - 1, lookup)
    {value2, lookup} = calc(number - 2, lookup)
    value = value1 + value2
    {value, Map.put(lookup, number, value)}
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## ETS でメモ化

```elixir
mod = MnishiguchiFib.MemoWithEts

defmodule mod do
  alias __MODULE__.Fib
  alias __MODULE__.FibCache

  def calc(number) do
    Fib.init()
    Fib.calc(number)
  end

  defmodule Fib do
    def init(), do: FibCache.init_table()

    def calc(number) when number in 0..1, do: number

    def calc(number) do
      case FibCache.get_value(number) do
        nil ->
          value = calc(number - 1) + calc(number - 2)
          FibCache.put_value(number, value)
          value

        value ->
          value
      end
    end
  end

  defmodule FibCache do
    @ets_table __MODULE__

    def init_table() do
      case :ets.whereis(@ets_table) do
        :undefined ->
          :ets.new(@ets_table, [:set, :named_table, :public])
          :created

        _ ->
          :ets.delete_all_objects(@ets_table)
          :cleared
      end
    end

    def get_value(number) do
      case :ets.lookup(@ets_table, number) do
        [{^number, value}] -> value
        [] -> nil
      end
    end

    def put_value(number, value) do
      :ets.insert(@ets_table, {number, value})
    end
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Bench

```elixir
defmodule MnishiguchiFib.Bench do
  def run(n \\ 20) do
    [
      MnishiguchiFib.SimpleRecursion,
      MnishiguchiFib.NonexponentialRecursion,
      MnishiguchiFib.Formula,
      MnishiguchiFib.MemoWithMap,
      MnishiguchiFib.MemoWithEts
    ]
    |> Map.new(fn mod -> {mod, &mod.calc/1} end)
    |> Benchee.run(inputs: %{"n" => n})
  end
end

MnishiguchiFib.Bench.run()
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.16.0
Erlang 26.2.1
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: n
Estimated total run time: 35 s

Benchmarking Elixir.MnishiguchiFib.SimpleRecursion with input n ...
Benchmarking Elixir.MnishiguchiFib.NonexponentialRecursion with input n ...
Benchmarking Elixir.MnishiguchiFib.Formula with input n ...
Benchmarking Elixir.MnishiguchiFib.MemoWithMap with input n ...
Benchmarking Elixir.MnishiguchiFib.MemoWithEts with input n ...
Calculating statistics...
Formatting results...

##### With input n #####
Name                                                    ips        average  deviation         median         99th %
Elixir.MnishiguchiFib.NonexponentialRecursion       14.64 M       68.32 ns  ±5446.49%          83 ns          84 ns
Elixir.MnishiguchiFib.Formula                        4.12 M      242.49 ns ±13368.11%         167 ns         292 ns
Elixir.MnishiguchiFib.MemoWithMap                    1.19 M      841.73 ns  ±1609.64%         791 ns        1000 ns
Elixir.MnishiguchiFib.MemoWithEts                    0.34 M     2934.75 ns   ±321.22%        2833 ns        3250 ns
Elixir.MnishiguchiFib.SimpleRecursion              0.0167 M    59742.21 ns    ±33.65%       51418 ns   121377.03 ns

Comparison: 
Elixir.MnishiguchiFib.NonexponentialRecursion       14.64 M
Elixir.MnishiguchiFib.Formula                        4.12 M - 3.55x slower +174.17 ns
Elixir.MnishiguchiFib.MemoWithMap                    1.19 M - 12.32x slower +773.41 ns
Elixir.MnishiguchiFib.MemoWithEts                    0.34 M - 42.96x slower +2866.43 ns
Elixir.MnishiguchiFib.SimpleRecursion              0.0167 M - 874.47x slower +59673.89 ns
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %Benchee.System{
    elixir: "1.16.0",
    erlang: "26.2.1",
    jit_enabled?: true,
    num_cores: 10,
    os: :macOS,
    available_memory: "32 GB",
    cpu_speed: "Apple M1 Pro"
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, benchmarking: true, fast_warning: true},
    inputs: [{"n", 20}],
    input_names: ["n"],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.NonexponentialRecursion",
      job_name: "Elixir.MnishiguchiFib.NonexponentialRecursion",
      function: &MnishiguchiFib.NonexponentialRecursion.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 68.3178095947408,
          ips: 14637471.633414041,
          std_dev: 3720.9213628303773,
          std_dev_ratio: 54.46488089859397,
          std_dev_ips: 797228149.1704434,
          median: 83.0,
          percentiles: %{50 => 83.0, 99 => 84.0},
          mode: 83,
          minimum: 0,
          maximum: 6890162,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 18100687
        },
        samples: [459, 84, 83, 41, 83, 83, 83, 83, 83, 83, 83, 83, 83, 42, 84, 83, 41, 83, 42, 42,
         42, 84, 83, 83, 42, 42, 83, 83, 84, 83, 41, 42, 84, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.Formula",
      job_name: "Elixir.MnishiguchiFib.Formula",
      function: &MnishiguchiFib.Formula.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 242.49230009811606,
          ips: 4123842.2811585558,
          std_dev: 32416.627141236746,
          std_dev_ratio: 133.6810576175841,
          std_dev_ips: 551279597.5933863,
          median: 167.0,
          percentiles: %{50 => 167.0, 99 => 292.0},
          mode: 167,
          minimum: 83,
          maximum: 58318283,
          relative_more: 3.5494741640074987,
          relative_less: 0.28173187176293174,
          absolute_difference: 174.17449050337527,
          sample_size: 12655421
        },
        samples: [1791, 166, 166, 167, 167, 166, 209, 166, 167, 167, 1125, 208, 166, 209, 166, 167,
         208, 167, 167, 208, 167, 166, 167, 208, 167, 167, 208, 167, 166, 167, 1125, 208, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.MemoWithMap",
      job_name: "Elixir.MnishiguchiFib.MemoWithMap",
      function: &MnishiguchiFib.MemoWithMap.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 841.7291234517039,
          ips: 1188030.6527820611,
          std_dev: 13548.804725937716,
          std_dev_ratio: 16.096395322972462,
          std_dev_ips: 19123011.04298909,
          median: 791.0,
          percentiles: %{50 => 791.0, 99 => 1000.0},
          mode: 750,
          minimum: 666,
          maximum: 16719517,
          relative_more: 12.320786167542781,
          relative_less: 0.08116365192948047,
          absolute_difference: 773.4113138569631,
          sample_size: 5005018
        },
        samples: [3250, 1541, 1750, 1125, 1125, 1458, 1083, 1125, 1333, 1041, 1042, 1209, 1042,
         1000, 1167, 1000, 1000, 1125, 1000, 1000, 1167, 958, 4041, 1166, 1083, 1083, 1208, 1041,
         1000, 1166, 1000, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.MemoWithEts",
      job_name: "Elixir.MnishiguchiFib.MemoWithEts",
      function: &MnishiguchiFib.MemoWithEts.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 2934.752598687604,
          ips: 340744.22506591916,
          std_dev: 9426.91950942308,
          std_dev_ratio: 3.212168382997162,
          std_dev_ips: 1094527.8264456147,
          median: 2833.0,
          percentiles: %{50 => 2833.0, 99 => 3250.0},
          mode: 2792,
          minimum: 2666,
          maximum: 6418483,
          relative_more: 42.957357914377944,
          relative_less: 0.023278899088560966,
          absolute_difference: 2866.434789092863,
          sample_size: 1599365
        },
        samples: [6208, 2875, 2875, 3042, 2792, 2959, 3293, 2959, 2834, 3250, 2792, 7708, 3667,
         2875, 2875, 3208, 2916, 2917, 3168, 2917, 2875, 3208, 2875, 3084, 3209, 2875, 2875, 3417,
         2875, 2833, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.SimpleRecursion",
      job_name: "Elixir.MnishiguchiFib.SimpleRecursion",
      function: &MnishiguchiFib.SimpleRecursion.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 59742.20787567749,
          ips: 16738.58458798481,
          std_dev: 20103.49820532845,
          std_dev_ratio: 0.3365041052242911,
          std_dev_ips: 5632.602429500937,
          median: 51418.0,
          percentiles: %{50 => 51418.0, 99 => 121377.03},
          mode: 51376,
          minimum: 50792,
          maximum: 633348,
          relative_more: 874.4748730977542,
          relative_less: 0.001143543434767409,
          absolute_difference: 59673.89006608275,
          sample_size: 83396
        },
        samples: [51668, 51168, 51168, 51544, 51792, 51376, 52960, 57794, 53001, 54918, 54627,
         54584, 54126, 52876, 52918, 52959, 52959, 52792, 53752, 52959, 53084, 52792, 52918, 52751,
         53459, 54417, 54585, 54626, 54584, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```
