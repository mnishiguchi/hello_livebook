<!-- livebook:{"persist_outputs":true} -->

# Fibonacci sequence

```elixir
Mix.install([
  {:benchee, "~> 1.3.0"}
])
```

## Introduction

* https://ja.wikipedia.org/wiki/フィボナッチ数
* https://en.wikipedia.org/wiki/Fibonacci_sequence

## シンプルな再帰的処理

* n が与えられてから F(n) が求まるまでに指数時間の計算が必要となるため、実用的ではない

```elixir
mod = MnishiguchiFib.SimpleRecursion

defmodule mod do
  def calc(0), do: 0
  def calc(1), do: 1
  def calc(n), do: calc(n - 2) + calc(n - 1)
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 指数関数的なコールを必要としない再帰的処理

```elixir
mod = MnishiguchiFib.NonexponentialRecursion

defmodule mod do
  def calc(n, a \\ 0, b \\ 1)
  def calc(n, _, _) when n < 0, do: :error
  def calc(n, a, b) when n > 1, do: calc(n - 1, b, a + b)
  def calc(0, _, _), do: 0
  def calc(_, _, b), do: b
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 一般項の公式

```elixir
mod = MnishiguchiFib.Formula

defmodule mod do
  def calc(n) do
    round((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5)
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Map でメモ化

```elixir
mod = MnishiguchiFib.MemoWithMap

defmodule mod do
  def calc(number) do
    {value, _} = calc(number, %{0 => 0, 1 => 1})
    value
  end

  def calc(number, lookup) when number in 0..1, do: {number, lookup}

  def calc(number, lookup) do
    case lookup[number] do
      nil ->
        {value1, lookup} = calc(number - 1, lookup)
        {value2, lookup} = calc(number - 2, lookup)
        value = value1 + value2
        {value, Map.put(lookup, number, value)}

      value ->
        {value, lookup}
    end
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## ETS でメモ化

```elixir
mod = MnishiguchiFib.MemoWithEts

defmodule mod do
  alias __MODULE__.Fib
  alias __MODULE__.FibCache

  def calc(number) do
    Fib.init()
    Fib.calc(number)
  end

  defmodule Fib do
    def init(), do: FibCache.init_table()

    def calc(number) when number in 0..1, do: number

    def calc(number) do
      case FibCache.get_value(number) do
        nil ->
          value = calc(number - 1) + calc(number - 2)
          FibCache.put_value(number, value)
          value

        value ->
          value
      end
    end
  end

  defmodule FibCache do
    @ets_table __MODULE__

    def init_table() do
      case :ets.whereis(@ets_table) do
        :undefined ->
          :ets.new(@ets_table, [:set, :named_table, :public])
          :created

        _ ->
          :ets.delete_all_objects(@ets_table)
          :cleared
      end
    end

    def get_value(number) do
      case :ets.lookup(@ets_table, number) do
        [{^number, value}] -> value
        [] -> nil
      end
    end

    def put_value(number, value) do
      :ets.insert(@ets_table, {number, value})
    end
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Bench

```elixir
defmodule MnishiguchiFib.Bench do
  def run(n \\ 20) do
    [
      MnishiguchiFib.SimpleRecursion,
      MnishiguchiFib.NonexponentialRecursion,
      MnishiguchiFib.Formula,
      MnishiguchiFib.MemoWithMap,
      MnishiguchiFib.MemoWithEts
    ]
    |> Map.new(fn mod -> {mod, &mod.calc/1} end)
    |> Benchee.run(inputs: %{"n" => n})
  end
end

MnishiguchiFib.Bench.run()
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.16.0
Erlang 26.2.1
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: n
Estimated total run time: 35 s

Benchmarking Elixir.MnishiguchiFib.SimpleRecursion with input n ...
Benchmarking Elixir.MnishiguchiFib.NonexponentialRecursion with input n ...
Benchmarking Elixir.MnishiguchiFib.Formula with input n ...
Benchmarking Elixir.MnishiguchiFib.MemoWithMap with input n ...
Benchmarking Elixir.MnishiguchiFib.MemoWithEts with input n ...
Calculating statistics...
Formatting results...

##### With input n #####
Name                                                    ips        average  deviation         median         99th %
Elixir.MnishiguchiFib.NonexponentialRecursion       14.13 M       70.75 ns ±11194.39%          83 ns          84 ns
Elixir.MnishiguchiFib.Formula                        3.94 M      254.08 ns ±14252.32%         167 ns         292 ns
Elixir.MnishiguchiFib.MemoWithMap                    1.25 M      801.18 ns  ±1682.74%         750 ns         918 ns
Elixir.MnishiguchiFib.MemoWithEts                    0.33 M     2987.77 ns   ±312.58%        2875 ns        3292 ns
Elixir.MnishiguchiFib.SimpleRecursion              0.0193 M    51913.96 ns     ±9.88%       51293 ns    61857.60 ns

Comparison: 
Elixir.MnishiguchiFib.NonexponentialRecursion       14.13 M
Elixir.MnishiguchiFib.Formula                        3.94 M - 3.59x slower +183.34 ns
Elixir.MnishiguchiFib.MemoWithMap                    1.25 M - 11.32x slower +730.43 ns
Elixir.MnishiguchiFib.MemoWithEts                    0.33 M - 42.23x slower +2917.02 ns
Elixir.MnishiguchiFib.SimpleRecursion              0.0193 M - 733.79x slower +51843.21 ns
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %Benchee.System{
    elixir: "1.16.0",
    erlang: "26.2.1",
    jit_enabled?: true,
    num_cores: 10,
    os: :macOS,
    available_memory: "32 GB",
    cpu_speed: "Apple M1 Pro"
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, benchmarking: true, fast_warning: true},
    inputs: [{"n", 20}],
    input_names: ["n"],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.NonexponentialRecursion",
      job_name: "Elixir.MnishiguchiFib.NonexponentialRecursion",
      function: &MnishiguchiFib.NonexponentialRecursion.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 70.74776729213926,
          ips: 14134721.67779787,
          std_dev: 7919.783772600181,
          std_dev_ratio: 111.94393937404358,
          std_dev_ips: 1582296426.5683844,
          median: 83.0,
          percentiles: %{50 => 83.0, 99 => 84.0},
          mode: 83,
          minimum: 0,
          maximum: 29904701,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 17631841
        },
        samples: [541, 125, 83, 42, 83, 41, 42, 84, 83, 41, 42, 84, 83, 83, 42, 42, 83, 83, 84, 42,
         42, 83, 83, 84, 42, 42, 83, 83, 84, 83, 41, 42, 84, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.Formula",
      job_name: "Elixir.MnishiguchiFib.Formula",
      function: &MnishiguchiFib.Formula.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 254.08442711876663,
          ips: 3935699.6858865744,
          std_dev: 36212.93048015976,
          std_dev_ratio: 142.52321911579713,
          std_dev_ips: 560928588.7055862,
          median: 167.0,
          percentiles: %{50 => 167.0, 99 => 292.0},
          mode: 167,
          minimum: 83,
          maximum: 59729817,
          relative_more: 3.591412659986484,
          relative_less: 0.2784419655088489,
          absolute_difference: 183.33665982662737,
          sample_size: 12279526
        },
        samples: [2292, 167, 208, 166, 166, 209, 166, 167, 167, 166, 1459, 250, 167, 166, 167, 208,
         167, 167, 166, 167, 166, 167, 167, 166, 167, 166, 167, 166, 167, 167, 1083, 167, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.MemoWithMap",
      job_name: "Elixir.MnishiguchiFib.MemoWithMap",
      function: &MnishiguchiFib.MemoWithMap.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 801.1754786878271,
          ips: 1248166.0093214656,
          std_dev: 13481.668886774649,
          std_dev_ratio: 16.82736085339888,
          std_dev_ips: 21003339.843799133,
          median: 750.0,
          percentiles: %{50 => 750.0, 99 => 918.0},
          mode: 750,
          minimum: 625,
          maximum: 18105258,
          relative_more: 11.324392406328917,
          relative_less: 0.08830495836943317,
          absolute_difference: 730.4277113956878,
          sample_size: 5217910
        },
        samples: [2792, 1292, 1793, 1084, 1042, 1375, 1042, 1083, 1292, 1000, 1000, 1208, 1000, 958,
         1125, 958, 3875, 1166, 1042, 1042, 1167, 1000, 959, 1167, 1000, 958, 1125, 1000, 959, 1167,
         958, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.MemoWithEts",
      job_name: "Elixir.MnishiguchiFib.MemoWithEts",
      function: &MnishiguchiFib.MemoWithEts.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 2987.767226952689,
          ips: 334698.09527964104,
          std_dev: 9339.178750551533,
          std_dev_ratio: 3.125805339285696,
          std_dev_ips: 1046201.0932738546,
          median: 2875.0,
          percentiles: %{50 => 2875.0, 99 => 3292.0},
          mode: 2875,
          minimum: 2750,
          maximum: 6279647,
          relative_more: 42.23125819102221,
          relative_less: 0.0236791429579663,
          absolute_difference: 2917.0194596605497,
          sample_size: 1573958
        },
        samples: [8750, 2917, 2875, 2917, 2917, 2875, 3250, 2875, 2875, 3292, 2875, 8667, 3500,
         3000, 2917, 3209, 2916, 2958, 3250, 2917, 2917, 3209, 2959, 3125, 3167, 3042, 3042, 3084,
         2876, 2875, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.MnishiguchiFib.SimpleRecursion",
      job_name: "Elixir.MnishiguchiFib.SimpleRecursion",
      function: &MnishiguchiFib.SimpleRecursion.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 51913.95763197666,
          ips: 19262.642372386672,
          std_dev: 5128.819463085868,
          std_dev_ratio: 0.0987946151099593,
          std_dev_ips: 1903.0453391807343,
          median: 51293.0,
          percentiles: %{50 => 51293.0, 99 => 61857.599999999744},
          mode: 51001,
          minimum: 50710,
          maximum: 529554,
          relative_more: 733.7893423209807,
          relative_less: 0.0013627889399933136,
          absolute_difference: 51843.20986468452,
          sample_size: 95945
        },
        samples: [61084, 54168, 54085, 53959, 52043, 51459, 51501, 51586, 51584, 51376, 51251,
         51460, 51376, 51460, 51501, 51543, 52210, 54001, 54418, 51668, 51543, 51334, 51251, 51251,
         51542, 51793, 51459, 51501, 51293, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```
