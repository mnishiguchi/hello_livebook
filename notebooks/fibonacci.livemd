<!-- livebook:{"persist_outputs":true} -->

# Fibonacci sequence

```elixir
Mix.install([
  {:benchee, "~> 1.3.0"}
])
```

## Introduction

* https://ja.wikipedia.org/wiki/フィボナッチ数
* https://en.wikipedia.org/wiki/Fibonacci_sequence

## シンプルな再帰的処理

* n が与えられてから F(n) が求まるまでに指数時間の計算が必要となるため、実用的ではない

```elixir
mod = Mnishiguchi.Fibonacci01

defmodule mod do
  def calc(0), do: 0
  def calc(1), do: 1
  def calc(n), do: calc(n - 2) + calc(n - 1)
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 指数関数的なコールを必要としない再帰的処理

* 線形時間で計算するためにメモ化などの手法を用いる

```elixir
mod = Mnishiguchi.Fibonacci02

defmodule mod do
  def calc(n, a \\ 0, b \\ 1)
  def calc(n, _, _) when n < 0, do: :error
  def calc(n, a, b) when n > 1, do: calc(n - 1, b, a + b)
  def calc(0, _, _), do: 0
  def calc(_, _, b), do: b
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 一般項の公式

* n が大きい場合に有効

```elixir
mod = Mnishiguchi.Fibonacci03

defmodule mod do
  def calc(n) do
    round((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5)
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Enum.reduce と Map でメモ化

```elixir
mod = Mnishiguchi.Fibonacci04

defmodule mod do
  def calc(n, memo \\ %{0 => 0, 1 => 1})

  def calc(n, memo) when is_map_key(memo, n), do: memo[n]

  def calc(n, memo) do
    2..n
    |> Enum.reduce(memo, fn i, acc ->
      new_memo = Map.merge(acc, %{(i - 2) => calc(i - 2, acc)})
      new_memo = Map.merge(new_memo, %{(i - 1) => calc(i - 1, new_memo)})
      Map.merge(new_memo, %{n => calc(i - 2, new_memo) + calc(i - 1, new_memo)})
    end)
    |> then(&calc(n, &1))
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Bench

```elixir
defmodule Mnishiguchi.FibonacciBench do
  def run(n \\ 20) do
    [
      Mnishiguchi.Fibonacci01,
      Mnishiguchi.Fibonacci02,
      Mnishiguchi.Fibonacci03,
      Mnishiguchi.Fibonacci04
    ]
    |> Map.new(fn mod -> {mod, &mod.calc/1} end)
    |> Benchee.run(inputs: %{"n" => n})
  end
end

Mnishiguchi.FibonacciBench.run(40)
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.16.0
Erlang 26.2.1
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: n
Estimated total run time: 28 s

Benchmarking Elixir.Mnishiguchi.Fibonacci01 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci02 with input n ...
Warning: The function you are trying to benchmark is super fast, making measurements more unreliable!
This holds especially true for memory measurements or when running with hooks.

See: https://github.com/bencheeorg/benchee/wiki/Benchee-Warnings#fast-execution-warning

You may disable this warning by passing print: [fast_warning: false] as configuration options.

Benchmarking Elixir.Mnishiguchi.Fibonacci03 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci04 with input n ...
Calculating statistics...
Formatting results...

##### With input n #####
Name                                     ips        average  deviation         median         99th %
Elixir.Mnishiguchi.Fibonacci02        9.95 M      100.55 ns   ±632.60%       95.90 ns      112.50 ns
Elixir.Mnishiguchi.Fibonacci03        4.00 M      249.92 ns ±13755.97%         167 ns         292 ns
Elixir.Mnishiguchi.Fibonacci04     0.00619 M   161550.16 ns    ±11.92%      159793 ns   187407.04 ns
Elixir.Mnishiguchi.Fibonacci01     0.00000 M1557759026.25 n    ±15.63%  1675952304 ns  1686473717 ns

Comparison: 
Elixir.Mnishiguchi.Fibonacci02        9.95 M
Elixir.Mnishiguchi.Fibonacci03        4.00 M - 2.49x slower +149.37 ns
Elixir.Mnishiguchi.Fibonacci04     0.00619 M - 1606.73x slower +161449.61 ns
Elixir.Mnishiguchi.Fibonacci01     0.00000 M - 15493024.76x slower +1557758925.70 ns
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %Benchee.System{
    elixir: "1.16.0",
    erlang: "26.2.1",
    jit_enabled?: true,
    num_cores: 10,
    os: :macOS,
    available_memory: "32 GB",
    cpu_speed: "Apple M1 Pro"
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, fast_warning: true, benchmarking: true},
    inputs: [{"n", 40}],
    input_names: ["n"],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci02",
      job_name: "Elixir.Mnishiguchi.Fibonacci02",
      function: &Mnishiguchi.Fibonacci02.calc/1,
      input_name: "n",
      input: 40,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 100.54582952749882,
          ips: 9945713.359762024,
          std_dev: 636.0501974853212,
          std_dev_ratio: 6.325972946609032,
          std_dev_ips: 62916313.64858259,
          median: 95.9,
          percentiles: %{50 => 95.9, 99 => 112.5},
          mode: 95.8,
          minimum: 87.5,
          maximum: 891630.0,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 3817611
        },
        samples: [100.0, 95.8, 95.8, 100.0, 100.0, 95.8, 95.9, 95.9, 520.8, 108.3, 112.5, 104.1,
         104.1, 100.0, 100.0, 100.0, 100.0, 112.5, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
         116.7, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci03",
      job_name: "Elixir.Mnishiguchi.Fibonacci03",
      function: &Mnishiguchi.Fibonacci03.calc/1,
      input_name: "n",
      input: 40,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 249.92040984537303,
          ips: 4001273.848017074,
          std_dev: 34378.96687869765,
          std_dev_ratio: 137.5596610935781,
          std_dev_ips: 550413874.4758258,
          median: 167.0,
          percentiles: %{50 => 167.0, 99 => 292.0},
          mode: 167,
          minimum: 83,
          maximum: 62285975,
          relative_more: 2.485636759076327,
          relative_less: 0.402311398215564,
          absolute_difference: 149.3745803178742,
          sample_size: 12390917
        },
        samples: [1792, 208, 167, 166, 167, 208, 167, 167, 166, 167, 1250, 250, 167, 166, 209, 166,
         167, 167, 167, 167, 166, 167, 166, 125, 166, 209, 166, 167, 167, 167, 1125, 209, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci04",
      job_name: "Elixir.Mnishiguchi.Fibonacci04",
      function: &Mnishiguchi.Fibonacci04.calc/1,
      input_name: "n",
      input: 40,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 161550.15855197178,
          ips: 6190.0279700331785,
          std_dev: 19256.67130321975,
          std_dev_ratio: 0.11919933397666552,
          std_dev_ips: 737.8472113248857,
          median: 159793.0,
          percentiles: %{50 => 159793.0, 99 => 187407.0400000001},
          mode: 157876,
          minimum: 156084,
          maximum: 3296019,
          relative_more: 1606.731570182019,
          relative_less: 6.223814970454056e-4,
          absolute_difference: 161449.6127224443,
          sample_size: 30911
        },
        samples: [191293, 174626, 166668, 183710, 173959, 166251, 171917, 195126, 174293, 175001,
         187709, 169209, 169959, 164959, 168834, 164375, 164918, 186543, 168210, 168709, 164126,
         167751, 163792, 165834, 167626, 173042, 175501, 163292, 178959, 166001, 167584, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci01",
      job_name: "Elixir.Mnishiguchi.Fibonacci01",
      function: &Mnishiguchi.Fibonacci01.calc/1,
      input_name: "n",
      input: 40,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 1557759026.25,
          ips: 0.6419478129472338,
          std_dev: 243452434.85796496,
          std_dev_ratio: 0.1562837581137495,
          std_dev_ips: 0.100326016720296,
          median: 1675952304.0,
          percentiles: %{50 => 1675952304.0, 99 => 1686473717.0},
          mode: nil,
          minimum: 1192657780,
          maximum: 1686473717,
          relative_more: 15493024.758664506,
          relative_less: 6.454517536614327e-8,
          absolute_difference: 1557758925.7041705,
          sample_size: 4
        },
        samples: [1192657780, 1675066111, 1686473717, 1676838497]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```
