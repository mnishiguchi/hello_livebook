<!-- livebook:{"persist_outputs":true} -->

# Fibonacci sequence

```elixir
Mix.install([
  {:benchee, "~> 1.3.0"}
])
```

## Introduction

* https://ja.wikipedia.org/wiki/フィボナッチ数
* https://en.wikipedia.org/wiki/Fibonacci_sequence

## シンプルな再帰的処理

* n が与えられてから F(n) が求まるまでに指数時間の計算が必要となるため、実用的ではない

```elixir
mod = Mnishiguchi.Fibonacci01

defmodule mod do
  def calc(0), do: 0
  def calc(1), do: 1
  def calc(n), do: calc(n - 2) + calc(n - 1)
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 指数関数的なコールを必要としない再帰的処理

* 線形時間で計算するためにメモ化などの手法を用いる

```elixir
mod = Mnishiguchi.Fibonacci02

defmodule mod do
  def calc(n, a \\ 0, b \\ 1)
  def calc(n, _, _) when n < 0, do: :error
  def calc(n, a, b) when n > 1, do: calc(n - 1, b, a + b)
  def calc(0, _, _), do: 0
  def calc(_, _, b), do: b
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## 一般項の公式

* n が大きい場合に有効

```elixir
mod = Mnishiguchi.Fibonacci03

defmodule mod do
  def calc(n) do
    round((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5)
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Map でメモ化

```elixir
mod = Mnishiguchi.Fibonacci04

defmodule mod do
  def calc(n, lookup \\ %{0 => 0, 1 => 1})

  def calc(n, lookup) when is_map_key(lookup, n), do: lookup[n]

  def calc(n, lookup) do
    new_lookup =
      Enum.reduce(2..n, lookup, fn i, acc ->
        new_lookup = Map.merge(acc, %{(i - 2) => calc(i - 2, acc)})
        new_lookup = Map.merge(new_lookup, %{(i - 1) => calc(i - 1, new_lookup)})
        Map.merge(new_lookup, %{n => calc(i - 2, new_lookup) + calc(i - 1, new_lookup)})
      end)

    calc(n, new_lookup)
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## ETS でメモ化

```elixir
mod = Mnishiguchi.Fibonacci05

defmodule mod do
  alias __MODULE__.Fib
  alias __MODULE__.FibCache

  def calc(number) do
    Fib.init()
    Fib.calc(number)
  end

  defmodule Fib do
    def init(), do: FibCache.init_table()

    def calc(number) when number in 0..1, do: number

    def calc(number) do
      case FibCache.get_value(number) do
        nil ->
          value = calc(number - 1) + calc(number - 2)
          FibCache.put_value(number, value)
          value

        value ->
          value
      end
    end
  end

  defmodule FibCache do
    @ets_table __MODULE__

    def init_table() do
      case :ets.whereis(@ets_table) do
        :undefined ->
          :ets.new(@ets_table, [:set, :named_table, :public])
          :created

        _ ->
          :ets.delete_all_objects(@ets_table)
          :cleared
      end
    end

    def get_value(number) do
      case :ets.lookup(@ets_table, number) do
        [{^number, value}] -> value
        [] -> nil
      end
    end

    def put_value(number, value) do
      :ets.insert(@ets_table, {number, value})
    end
  end
end

0..20 |> Enum.map(&mod.calc/1)
```

<!-- livebook:{"output":true} -->

```
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
```

## Bench

```elixir
defmodule Mnishiguchi.FibonacciBench do
  def run(n \\ 20) do
    [
      Mnishiguchi.Fibonacci01,
      Mnishiguchi.Fibonacci02,
      Mnishiguchi.Fibonacci03,
      Mnishiguchi.Fibonacci04,
      Mnishiguchi.Fibonacci05
    ]
    |> Map.new(fn mod -> {mod, &mod.calc/1} end)
    |> Benchee.run(inputs: %{"n" => n})
  end
end

Mnishiguchi.FibonacciBench.run(20)
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.16.0
Erlang 26.2.1
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: n
Estimated total run time: 35 s

Benchmarking Elixir.Mnishiguchi.Fibonacci01 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci02 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci03 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci04 with input n ...
Benchmarking Elixir.Mnishiguchi.Fibonacci05 with input n ...
Calculating statistics...
Formatting results...

##### With input n #####
Name                                     ips        average  deviation         median         99th %
Elixir.Mnishiguchi.Fibonacci02    10292.11 K      0.0972 μs  ±3598.05%      0.0830 μs        0.21 μs
Elixir.Mnishiguchi.Fibonacci03     2907.53 K        0.34 μs  ±9481.12%       0.167 μs        3.54 μs
Elixir.Mnishiguchi.Fibonacci05      232.67 K        4.30 μs   ±263.81%        2.96 μs       14.92 μs
Elixir.Mnishiguchi.Fibonacci04       21.64 K       46.22 μs    ±50.36%       30.58 μs      105.30 μs
Elixir.Mnishiguchi.Fibonacci01       14.09 K       70.98 μs    ±47.79%       52.04 μs      160.60 μs

Comparison: 
Elixir.Mnishiguchi.Fibonacci02    10292.11 K
Elixir.Mnishiguchi.Fibonacci03     2907.53 K - 3.54x slower +0.25 μs
Elixir.Mnishiguchi.Fibonacci05      232.67 K - 44.23x slower +4.20 μs
Elixir.Mnishiguchi.Fibonacci04       21.64 K - 475.68x slower +46.12 μs
Elixir.Mnishiguchi.Fibonacci01       14.09 K - 730.49x slower +70.88 μs
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %Benchee.System{
    elixir: "1.16.0",
    erlang: "26.2.1",
    jit_enabled?: true,
    num_cores: 10,
    os: :macOS,
    available_memory: "32 GB",
    cpu_speed: "Apple M1 Pro"
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 5000000000.0,
    warmup: 2000000000.0,
    memory_time: 0.0,
    reduction_time: 0.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, benchmarking: true, fast_warning: true},
    inputs: [{"n", 20}],
    input_names: ["n"],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci02",
      job_name: "Elixir.Mnishiguchi.Fibonacci02",
      function: &Mnishiguchi.Fibonacci02.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 97.16178240261333,
          ips: 10292112.549523415,
          std_dev: 3495.9279076929615,
          std_dev_ratio: 35.980483490995866,
          std_dev_ips: 370315185.6755986,
          median: 83.0,
          percentiles: %{50 => 83.0, 99 => 209.0},
          mode: 83,
          minimum: 0,
          maximum: 9025674,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 12510619
        },
        samples: [666, 125, 84, 84, 42, 83, 83, 83, 83, 84, 84, 83, 83, 41, 83, 42, 84, 42, 83, 41,
         83, 83, 41, 83, 42, 84, 42, 83, 83, 83, 83, 42, 84, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci03",
      job_name: "Elixir.Mnishiguchi.Fibonacci03",
      function: &Mnishiguchi.Fibonacci03.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 343.9341241558932,
          ips: 2907533.5355404727,
          std_dev: 32608.795805873848,
          std_dev_ratio: 94.81116735916973,
          std_dev_ips: 275666648.64052624,
          median: 167.0,
          percentiles: %{50 => 167.0, 99 => 3542.0},
          mode: 167,
          minimum: 42,
          maximum: 62433231,
          relative_more: 3.539808715434213,
          relative_less: 0.2825011407084844,
          absolute_difference: 246.77234175327987,
          sample_size: 8680329
        },
        samples: [6457, 250, 208, 167, 167, 542, 208, 166, 250, 250, 9334, 333, 208, 208, 208, 166,
         3375, 208, 166, 208, 167, 3250, 208, 166, 167, 750, 208, 209, 209, 208, 1750, 167, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci05",
      job_name: "Elixir.Mnishiguchi.Fibonacci05",
      function: &Mnishiguchi.Fibonacci05.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 4297.919883345253,
          ips: 232670.69353132235,
          std_dev: 11338.36007005911,
          std_dev_ratio: 2.638104101008506,
          std_dev_ips: 613809.5107894747,
          median: 2959.0,
          percentiles: %{50 => 2959.0, 99 => 14917.0},
          mode: 2917,
          minimum: 2708,
          maximum: 7126549,
          relative_more: 44.234675168223895,
          relative_less: 0.022606699296355472,
          absolute_difference: 4200.758100942639,
          sample_size: 1078053
        },
        samples: [28834, 3416, 3084, 15000, 13708, 10041, 9166, 3459, 15292, 15124, 6792, 7667,
         20582, 11834, 7375, 19000, 15040, 7833, 15583, 13499, 4250, 3625, 14041, 10917, 11541,
         3125, 10959, 15000, 11582, 7000, 14750, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci04",
      job_name: "Elixir.Mnishiguchi.Fibonacci04",
      function: &Mnishiguchi.Fibonacci04.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 46218.21179398885,
          ips: 21636.49265482963,
          std_dev: 23273.59268348673,
          std_dev_ratio: 0.5035589171477574,
          std_dev_ips: 10895.248812141415,
          median: 30583.0,
          percentiles: %{50 => 30583.0, 99 => 105302.3999999999},
          mode: 28874,
          minimum: 28291,
          maximum: 890313,
          relative_more: 475.68303762144376,
          relative_less: 0.0021022401912842983,
          absolute_difference: 46121.05001158624,
          sample_size: 106868
        },
        samples: [38166, 65832, 98123, 39999, 73415, 100789, 54040, 36208, 33124, 32957, 43249,
         92165, 101540, 96415, 90123, 99080, 57082, 33374, 90498, 67916, 32916, 32624, 33082, 32583,
         32624, 59124, 83998, 74498, 72831, 85415, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    },
    %Benchee.Scenario{
      name: "Elixir.Mnishiguchi.Fibonacci01",
      job_name: "Elixir.Mnishiguchi.Fibonacci01",
      function: &Mnishiguchi.Fibonacci01.calc/1,
      input_name: "n",
      input: 20,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 70975.74099115196,
          ips: 14089.321027654545,
          std_dev: 33917.71197494081,
          std_dev_ratio: 0.4778775325384639,
          std_dev_ips: 6732.969967837848,
          median: 52041.0,
          percentiles: %{50 => 52041.0, 99 => 160596.99999999977},
          mode: 51999,
          minimum: 51124,
          maximum: 1060851,
          relative_more: 730.4903145667587,
          relative_less: 0.0013689435438895353,
          absolute_difference: 70878.57920874935,
          sample_size: 69959
        },
        samples: [52124, 51666, 51874, 51956, 52041, 52124, 51999, 51832, 51791, 51873, 51791,
         51833, 51749, 51790, 51749, 51790, 51956, 51707, 52541, 51874, 51624, 51666, 51748, 51665,
         51915, 51832, 51915, 51916, 51790, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: nil,
          ips: nil,
          std_dev: nil,
          std_dev_ratio: nil,
          std_dev_ips: nil,
          median: nil,
          percentiles: nil,
          mode: nil,
          minimum: nil,
          maximum: nil,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 0
        },
        samples: []
      }
    }
  ]
}
```
