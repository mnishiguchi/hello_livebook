# 闘魂 Elixir ── Supply Stacks

```elixir
# Mix.install([{:benchee, "~> 1.1"}])
```

## About

* [闘魂Elixir ── Advent of Code 2022 (Day 5: Supply Stacks)をElixirで楽しむ](https://qiita.com/torifukukaiou/items/a2888ac943fcfb1774a3)
* https://adventofcode.com/2022/day/5

## Answer 1

```elixir
input = """
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
"""

[stacks_input, commands_input] = String.split(input, "\n\n", trim: true)
```

```elixir
parse_stacks = fn stacks_input ->
  stacks_input
  |> String.split("\n", trim: true)
  |> Enum.map(fn row ->
    row
    |> String.split("", trim: true)
    |> Enum.chunk_every(4)
    |> Enum.map(fn
      ["[", crate | _] -> crate
      [" ", " " | _] -> nil
      row -> Enum.join(row) |> String.trim() |> String.to_integer()
    end)
  end)
  |> Enum.zip()
  |> Enum.map(fn stack_tpl ->
    last_index = tuple_size(stack_tpl) - 1

    {
      elem(stack_tpl, last_index),
      Tuple.delete_at(stack_tpl, last_index)
      |> Tuple.to_list()
      |> Enum.reject(&is_nil/1)
    }
  end)
  |> Map.new()
end

stacks = parse_stacks.(stacks_input)
```

```elixir
parse_commands = fn commands_input ->
  commands_input
  |> String.split("\n", trim: true)
  |> Enum.map(fn command ->
    captures = Regex.named_captures(~r/move (?<move>\d)+ from (?<from>\d)+ to (?<to>\d)/, command)

    {
      String.to_integer(captures["move"]),
      String.to_integer(captures["from"]),
      String.to_integer(captures["to"])
    }
  end)
end

commands = parse_commands.(commands_input)
```

```elixir
update_stacks = fn stacks, {n, from, to} ->
  {taken, rest} = Enum.split(stacks[from], n)

  stacks
  |> Map.replace(from, rest)
  |> Map.replace(to, Enum.reverse(taken) ++ stacks[to])
end

stacks
|> update_stacks.({1, 2, 1})
|> update_stacks.({3, 1, 3})
|> update_stacks.({2, 2, 1})
|> update_stacks.({1, 1, 2})
|> dbg()
```

```elixir
print_stacks = fn stacks ->
  stacks
  |> Enum.sort_by(fn {k, _v} -> k end)
  |> Enum.map(fn {_k, v} -> List.first(v) end)
  |> IO.puts()
end
```

```elixir
# using for
for command <- commands, reduce: stacks do
  state -> update_stacks.(state, command)
end
|> print_stacks.()
```

```elixir
# using enum
commands
|> Enum.reduce(stacks, fn command, state ->
  update_stacks.(state, command)
end)
|> print_stacks.()
```
