# Evision basics

```elixir
Mix.install([
  {:evision, "0.1.29"},
  {:kino, "~> 0.7.0"},
  {:exla, "~> 0.4.0"}
])
```

## Resources

* [Livebook + Evision基本編 Evision(OpenCV)でお手軽画像処理](https://qiita.com/the_haigo/items/baf47624567cb992d934)
* https://github.com/cocoa-xu/evision

## Evision

* OpenCVのElixirラッパー
* Nxのバックエンドとして使用でき、行列演算の高速化(CPU,GPU)ができる
* 画像処理の関数を使用できる

```elixir
alias Evision, as: Cv
```

```elixir
File.cwd!()
```

## Mat.zerosで黒色画像の作成

* 第1引数：行列サイズ
* 第2引数：型

```elixir
# 第一引数で指定したサイズで0で埋めた行列を作成
Cv.Mat.zeros({100, 100}, :u8)
```

```elixir
# RGBの値で作ってMatで表示
Cv.Mat.zeros({100, 100, 3}, :u8)
|> Cv.Mat.to_nx()
|> Cv.Mat.from_nx_2d()
|> dbg()

:ok
```

## Mat.fullでグレー画像の作成

* 第1引数：行列サイズ
* 第2引数：値
* 第3引数：型

```elixir
Cv.Mat.full({100, 100}, 200, :u8)
```

## Mat.from_nx_2dでNxから色画像の作成

```elixir
shape = {250, 250, 3}

red =
  Nx.tensor([0, 0, 255], type: :u8)
  |> Nx.broadcast(shape)
  |> Cv.Mat.from_nx_2d()

green =
  Nx.tensor([0, 255, 0], type: :u8)
  |> Nx.broadcast(shape)
  |> Cv.Mat.from_nx_2d()

blue =
  Nx.tensor([255, 0, 0], type: :u8)
  |> Nx.broadcast(shape)
  |> Cv.Mat.from_nx_2d()

mat_to_img = &Kino.Image.new(Cv.imencode(".png", &1), :png)

[red, green, blue]
|> Enum.map(mat_to_img)
|> Kino.Layout.grid(columns: 3)
```

## imreadで画像の読み込み

```elixir
livebook_logo = Cv.imread("static/images/logo.png")
img = livebook_logo
```

## imwriteでファイル書き込み

```elixir
Cv.imwrite("tmp/logo" <> ".png", img)
```

```elixir
Cv.imwrite("tmp/logo" <> ".jpg", img)
```

```elixir
{:error, _} = Cv.imwrite("images/logo", img)
```

## resize

```elixir
{w, h} = {200, 200}
img = Cv.resize(img, {w, h})
```

## rotate

```elixir
Cv.rotate(img, Cv.Constant.cv_ROTATE_90_CLOCKWISE())
```

```elixir
Cv.rotate(img, Cv.Constant.cv_ROTATE_90_COUNTERCLOCKWISE())
```

```elixir
Cv.rotate(img, Cv.Constant.cv_ROTATE_180())
```

## flip

```elixir
# 縦方向に反転
Cv.flip(img, 0)
```

```elixir
# 横方向に反転
Cv.flip(img, 1)
```

## hconcatで横連結

```elixir
Cv.hconcat([img, img])
```

## vconcatで縦連結

```elixir
Cv.vconcat([img, img])
```

## rectangle

```elixir
{x, y, w, h} = {40, 5, 80, 80}
start_point = {x, y}
end_point = {x + w, y + h}
color = {255, 255, 255}
options = [thickness: 5]

Cv.rectangle(img, start_point, end_point, color, options)
```

```elixir
{x, y, w, h} = {40, 5, 80, 80}
start_point = {x, y}
end_point = {x + w, y + h}
color = {255, 255, 255}
options = [thickness: -1]

Cv.rectangle(img, start_point, end_point, color, options)
```

## circle

```elixir
center = {100, 100}
diameter = 40
color = {255, 255, 255}
options = [thickness: 3]

Cv.circle(img, center, diameter, color, options)
```

```elixir
{ox, oy} = {100, 100}
{h, w} = {50, 100}
rotation = -30
start_point = 0
end_point = 360
color = {255, 255, 255}
options = [thickness: 1]

Cv.ellipse(img, {ox, oy}, {w, h}, rotation, start_point, end_point, color, options)
```

```elixir
{ox, oy} = {100, 100}
{h, w} = {50, 50}
rotation = 90
start_point = 0
end_point = 180
color = {255, 255, 255}
options = [thickness: -1]

Cv.ellipse(img, {ox, oy}, {w, h}, rotation, start_point, end_point, color, options)
```

## putText

```elixir
text = "LiveViewJP"
position = {20, 120}
options = [thickness: 2]

Cv.putText(img, text, position, Cv.Constant.cv_FONT_ITALIC(), 1.0, color, options)
```

## Mat.roiで切り取り

```elixir
{x, y, w, h} = {40, 10, 50, 80}
Cv.Mat.roi(img, {x, y, x + w, y + h})
```

## warpAffineでアフィン変換

### 並行移動

```elixir
{w, h} = {200, 200}
{x, y} = {50, -10}

m_shift = Nx.tensor([[1, 0, x], [0, 1, y]], type: :f32) |> Cv.Mat.from_nx()
sheer_img = Cv.warpAffine(img, m_shift, {w, h})
```

### 回転

```elixir
{w, h} = {200, 200}
center = {w / 2, h / 2}
angle = 45
scale = 1.0

m_rotate = Cv.getRotationMatrix2D(center, angle, scale)
rotation_img = Cv.warpAffine(img, m_rotate, {w, h})
```

### スキュー(平行四辺形に変形する処理)

<!-- livebook:{"break_markdown":true} -->

###

```elixir
{w, h} = {200, 200}
{a, b} = {0.2, 0.0}

m_shear = Nx.tensor([[1, a, 0], [b, 1, 0]], type: :f32) |> Cv.Mat.from_nx()
shear_img = Cv.warpAffine(img, m_shear, {w, h})
```
